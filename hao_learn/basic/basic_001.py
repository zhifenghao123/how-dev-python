# 知识1：注释

# 单行注释：井号后面行内容被注释掉
# 作用：对内容的解释，并且在程序运行时不会执行被注释掉的内容

'''多行注释
该引号内的内容均被注释
注释内容1
注释内容2
'''

"""多行注释
该引号内的内容均被注释
注释内容1
注释内容2
"""


# 原理：根据对象的引用计数器，对象创建会给对象一个引用计数器属性，如果该属性值为0，那么该对象被释放。创建了一个字符串对象，但是没有任何的引用，所以引用计数器为0

# 知识2：print输出
def basic_001_02():
    # 将内容输出到终端上显示
    print("haozhifeng is a good man")

    # 可以接受多个字符串，用逗号“,”隔开，遇到逗号“,”会输出一个空格
    print("haozhifeng is a good man", "haozhifeng is a nice man")

    # 打印数字
    print(18)
    # 打印表达式的值
    print(10 + 8)
    # 打印不同类型的多个数据
    print("10 + 8 =", 18)

# 知识3：input输入
def basic_001_03():
    print("请输入您的名字:")
    # 会阻塞等待输入，输入的内容保存在name容器(变量)中
    name = input()
    # 打印name容器的值到终端上
    print(name)

    # input小括号中的内容为提示信息，会展示在终端上
    sex = input("输入您的性别:")
    print(sex)

# 知识4：python数据类型简介
'''
计算机故名思义就是可以做数学计算的机器，因此，计算机程序理所当然地可以处理各种数值。
但是，计算机处理的远不止数值，还可以处理文本、图形、音频、视频、网页等各种各样的数据，不同的数据，需要定义不同的数据类型
分类：
（1）Number（数值）
    整数
    浮点数
    布尔
    复数
（2）String（字符串）
（3）None（空）
（4）list（列表）
（5）tuple（元组）
（6）dict（字典）
（7）set（集合）
'''

# 知识4：标识符
'''
（1）什么是标识符?
    是一个字符串(注意：字符串未必是标识符)
（2）标识符规则
    1）只能由字母、数字、下划线组成
    2）开头不能是数字
    3）不能是python的关键字
        # 查看关键字
        import keyword
        print(keyword.kwlist)
    4）区分大小写
    5）见名知意
（3）作用
    给变量、函数、类等命名
（4）注意
    在Python 3中，非-ASCII 标识符也是允许的了，但一般不会如此使用
'''

# 知识5：变量
'''
（1）概述
    1）程序可操作的存储区的名称
    2）程序运行期间能改变的数据
    3）每个变量都有特定的类型
（2）作用
    将不同类型的数据存储到内存
（3）变量的定义
    变量名 = 初始值(为了确定变量类型)
（4）数据的存储
    变量名 = 数据值
    注意：变量在使用前必须先"定义"（即赋予变量一个值），否则会出现错误
（5）删除变量
    del 变量名
    注意：删除后变量无法引用
'''

# 知识6：变量类型
'''
Python是一种动态类型语言，它不需要显式地声明变量类型。相比之下，静态类型语言需要在声明变量时指定其类型。
然而，在某些情况下，了解变量类型可能是有用的，例如在函数参数中使用类型标注或在代码中增加可读性。
这里，列举一下Python如何声明变量类型。
'''
def basic_001_06():
    '''
    (1)类型标注
    类型标注是Python 3.5中引入的一项新功能，它允许在变量声明时指定其类型。类型标注使用冒号（:）和类型名称来指定变量类型。
    类型标注对于增加代码可读性和减少错误非常有用。它可以让代码更易于理解和维护，并在代码中发现类型错误。
    例如，以下代码声明了两个字符串类型的变量：
    '''
    name1: str = "Alice"
    age1: str = 30
    print((type(age1))) # 结果还是：<class 'int'>

    '''
    （2）类型转换
    在Python中，变量类型是根据其值动态确定的。这意味着变量可以在运行时更改其类型。
    类型转换对于处理不同类型的数据非常有用。它可以让您在代码中执行各种操作，并将值转换为需要的类型。
    例如，以下代码将一个整数变量转换为字符串类型：
    '''
    age_str = "30"
    age = int(age_str)

    '''
    （3）类型推导
    Python中的类型推导是一种根据变量值自动确定其类型的功能。
    类型推导可以使代码更加简洁和易于阅读。它可以让您在不显式声明变量类型的情况下编写代码。
    例如，以下代码将自动确定变量x的类型为整数：
    '''
    x = 10

    '''
    （4）类型检查
    Python没有强制执行类型检查，这意味着您可以在代码中混合使用不同类型的变量。然而，这也可能导致错误和不可预测的行为。
    为了避免这种情况，您可以使用一些工具来进行类型检查。
    例如，mypy是一个流行的类型检查器，它可以在运行代码之前检查类型错误。它使用类型标注来确定变量类型，并在代码中发现类型错误。
    另一个工具是PyCharm IDE，它可以自动检测类型错误并提供修复建议。它还可以使用类型标注来提高代码可读性和减少错误。
    '''

    """
    总之，Python不需要显式声明变量类型，但这并不意味着类型不重要。
    类型标注、类型转换、类型推导和类型检查是管理变量类型的重要工具。
    使用这些工具可以使代码更加健壮、可读和易于维护。
    """
if __name__ == '__main__':
    #basic_001_02()
    #basic_001_03()
    basic_001_06()
